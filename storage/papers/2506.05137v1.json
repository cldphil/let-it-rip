{
  "id": "http://arxiv.org/abs/2506.05137v1",
  "title": "Neural Jumps for Option Pricing",
  "summary": "Recognizing the importance of jump risk in option pricing, we propose a\nneural jump stochastic differential equation model in this paper, which\nintegrates neural networks as parameter estimators in the conventional jump\ndiffusion model. To overcome the problem that the backpropagation algorithm is\nnot compatible with the jump process, we use the Gumbel-Softmax method to make\nthe jump parameter gradient learnable. We examine the proposed model using both\nsimulated data and S&P 500 index options. The findings demonstrate that the\nincorporation of neural jump components substantially improves the accuracy of\npricing compared to existing benchmark models.",
  "authors": [
    "Duosi Zheng",
    "Hanzhong Guo",
    "Yanchu Liu",
    "Wei Huang"
  ],
  "published": "2025-06-05T15:21:07Z",
  "updated": "2025-06-05T15:21:07Z",
  "categories": [
    "q-fin.GN"
  ],
  "pdf_url": "http://arxiv.org/pdf/2506.05137v1",
  "full_text": "--- Page 1 ---\nNeural Jumps for Option Pricing\nDuosi Zheng1, Hanzhong Guo2, Yanchu Liu3*, Wei Huang1*\n1College of Business, Southern University of Science and Technology, Shenzhen, China\n2School of Computing and Data Science, University of Hong Kong, Hong Kong, China\n3Lingnan College, Sun Yat-sen University, Guangzhou, China\n*Corresponding authors: liuych26@mail.sysu.edu.cn; huangw7@sustech.edu.cn.\nAbstract\nRecognizing the importance of jump risk in option pricing, we propose a neural jump stochastic differential\nequation model in this paper, which integrates neural networks as parameter estimators in the conventional\njump diffusion model. To overcome the problem that the backpropagation algorithm is not compatible with\nthe jump process, we use the Gumbel-Softmax method to make the jump parameter gradient learnable. We\nexamine the proposed model using both simulated data and S&P 500 index options. The findings demonstrate\nthat the incorporation of neural jump components substantially improves the accuracy of pricing compared\nto existing benchmark models.\nKey words : option pricing; deep learning; jump diffusion model\n1arXiv:2506.05137v1  [q-fin.GN]  5 Jun 2025\n--- Page 2 ---\n1. Introduction\nBlack and Scholes (1973) establish the fundamental framework for option pricing. How-\never, extensive empirical studies revealed that this seminal framework does not capture\nvolatility smiles and leptokurtic in the return distribution (Kou, 2002; Kim, 2021). Conse-\nquently, various extensions have been developed (Cox and Ross, 1976; Dupire et al., 1994;\nHull and White, 1987; Heston, 1993). Among them, jump models have received particu-\nlar attention due to their ability to explain abrupt and discontinuous movements in asset\nreturns and volatilities (Merton, 1976; Bates, 1996; Duffie et al., 2000). Empirical inves-\ntigations have also shown that the jump component is an important element in pricing\noptions (Eraker et al., 2003; Cummins and Esposito, 2025). Despite these advancements,\nparametric extensions remain constrained by inherent structural assumptions, which may\nnot fully accommodate complex financial markets (Bates, 2003).\nIn contrast, nonparametric methods driven by data directly approximate pricing func-\ntions without restrictions. Since the pioneering contribution of Hutchinson et al. (1994)\ndemonstrates the efficacy of artificial neural networks (ANN) in capturing the dynamics\nof option prices and implementing hedging strategies, it has become one of the most influ-\nential data-driven methods (Amilon, 2003; Liu et al., 2019). Ruf and Wang (2020) present\nan early review on applications of ANN in option pricing and hedging. However, the ANN\nmethod does not have a sounding theory that supports the training process. In addition,\nto obtain a well-trained network, a large-scale data set is generally required.\nThe emergence of hybrid models that integrate deep learning with parametric option\npricing models has recently gained research momentum. Andreou et al. (2008) propose a\nhybrid network that incorporates information from Black and Scholes (BS) implied volatil-\nities. Cao et al. (2021) construct a neural network architecture that enforces no-arbitrage\n2\n--- Page 3 ---\nconditions in the selection of input layer weights. Das and Padhy (2017) investigate a model\nusing homogeneity hints to group the option price estimated by parametric models, and\nfeed these groups of estimated price into neural networks. Shvimer and Zhu (2024) pro-\npose a two-submodel framework with moneyness-adaptive parameterization. These stud-\nies extract additional information from parametric models and incorporate it into neural\nnetworks to enhance empirical accuracy, but do not establish a foundational connection\nbetween neural networks and parametric models.\nE (2017) establishes a theoretical bridge between neural networks and discrete dynami-\ncal systems, suggesting that deep learning architectures can be interpreted as discretized\nforms of differential equations. Chen et al. (2018) introduce neural ordinary differential\nequations (NODE) that model the derivative function of ordinary differential equations\nthrough neural networks. Researchers have extended the framework of neural differential\nequations to other dynamical systems (Kidger et al., 2020; Li et al., 2020; Khoo et al., 2021).\nFollowing similar insights, Wang and Hong (2021) propose a neural-diffusion stochastic\ndifferential equation (NSDE) model for option pricing, where deterministic parameters are\nmodeled as nonlinear functions. This allows the drift and volatility terms to vary dynam-\nically over time, mitigating model misspecification and enhancing adaptability. Ma et al.\n(2023) combine neural networks with a rough volatility model, further improving the mod-\neling accuracy of volatility dynamics. Halskov (2023) constructs a deep structural model\nemploying neural networks to estimate conditional firm-level parameters in the Merton-\ntype model. Despite these innovations retaining stochastic structures in parametric models,\nthey predominantly concentrate on continuous-time models and neglect the jump process,\nwhich has been empirically identified as a crucial factor in option pricing (Eraker et al.,\n2003; Cummins and Esposito, 2025).\n3\n--- Page 4 ---\nThis study develops a novel neural jump stochastic differential equation (NJSDE) model.\nAiming at solving the incompatibility of the backpropagation (BP) algorithm with jump\nprocess, and enabling the whole training process to be continuously differentiable. Our\npaper is close to Chen et al. (2025) which also develops a surrogate model for jump-diffusion\nmodels. They define model parameters as pseudo-state variables and randomly sample\nthem within a predefined empirical range as input of a neural network. This approach\nreconstructs a mapping between parameters and predicted prices, thus avoiding the curse of\ndimensionality associated with complex structural models. However, this newly constructed\nrelationship omits the original model structure, which is based on theoretical assumptions.\nOur approach in this paper retains the stochastic terms from the parametric model to\npreserve fundamental economic assumptions, while replacing the deterministic components\nwith neural networks to enhance model flexibility.\nIncorporating neural networks into structural models renders analytical solutions\nintractable. Following Wang and Hong (2021), we reformulate the discretized structural\nmodel as a recurrent neural network-like structure and train it using BP algorithm. Jia and\nBenson (2019) extend the NODE model and propose a likelihood-based approach to opti-\nmize the jump process. This method enables scalable gradient computation via the adjoint\nsensitivity method rather than the BP algorithm, thereby avoiding the incompatibility of\nthe BP algorithm with the jump process. However, this approach may introduce additional\ncomputational complexity and potential truncation errors (Ma et al., 2021). Compared\nto Jia and Benson (2019), our model is developed in the context of option pricing and\nspecifically focuses on handling jump process with the BP algorithm.\nIt’s well known that jump diffusion models exhibit discontinuities, making gradient-based\ndeep learning methods less effective. Furthermore, the randomness of the jump process is\n4\n--- Page 5 ---\nintrinsically governed by the jump intensity parameter, making it difficult to separate the\nrandom term from the jump intensity parameter through reparameterization methods. To\naddress the nondifferentiability of the jump parameters, we adopt the Gumbel-Softmax\nmethod (Jang et al., 2017), which enables a differentiable relaxation of the jumps, allowing\ngradient-based optimization within the BP algorithm. Theoretically, we can utilize the\npowerful ability of neural networks to approximate any function, thereby approximating\nthe coefficient function in the parametric model (Hornik et al., 1989). Empirical tests\ndemonstrate that the proposed NJSDE model achieves the lowest pricing error in the\npresence of jumps, effectively capturing discontinuous dynamics. Even in the absence of\njumps, the NJSDE model maintains a competitive performance comparable to the NSDE\nmodel, showing its robustness under different market conditions.\nOur methodology offers at least two primary contributions to the literature. First, we\nintroduce a novel option pricing model that systematically integrates the jump process\nwith deep learning methods. Our approach addresses the challenge of the incompatibility\nbetween the jump process and gradient-based neural network optimization. To our best\nknowledge, this is the first attempt to optimize the jump process through the BP algorithm\nin the option pricing domain. Our methodology bridges the gap between jump models and\nneural networks, enabling a more effective calibration of jump risk in financial markets.\nSecond, the proposed model presents a more general hybrid structure combining the\nstrengths of both neural networks and jump models. The selection of the option pricing\nmodel involves a choice among misspecified models. Our model is sufficiently flexible to\nencompass most widely used parametric models, treating them as special cases within the\nbroader framework. In particular, depending on market conditions, the NJSDE model can\ndegenerate into stochastic volatility models or non-jump models, making it a unified and\nadaptive framework across different financial conditions.\n5\n--- Page 6 ---\nThe remainder of this paper is organized as follows. Section 2 introduces the proposed\nmethodology. Section 3 and Section 4 employ synthetic and real market data, respectively,\nto showcase the empirical performance of our approach. Section 5 concludes the paper.\n2. Model and Estimation\nThis section first introduces the Gumbel-Softmax method, which we use to reparameterize\nthe deterministic terms of the jump process, followed by the full specification of the NJSDE\nmodel. We then present how to calibrate model parameters and estimate option prices.\n2.1. The Gumbel-Softmax Method\nLet the occurrence of jumps satisfy a Poisson process Ntwith intensity parameter λ. To\nenable gradient-based optimization through the discrete jump structure, we employ the\nGumbel-Softmax method (Jang et al., 2017), which provides a continuous and differentiable\napproximation to sample from a categorical distribution, while preserving the original\nprobability structure.\nLetπidenote the normalized probability of observing ijumps within a given time t,\ni= 0,1,2...,n , where nis a user-specified upper bound on the number of jumps. This trun-\ncation assumes that at most njumps can occur within t, and nacts as a hyperparameter\nin the model. The probability πiis given by:\nπi=P(Nt=i)Pn\nj=0P(Nt=j)=(λt)i\ni!e−λt\nPn\nj=0(λt)j\nj!e−λt=(λt)i\ni!Pn\nj=0(λt)j\nj!. (1)\nWe use zto denote the realized number of jumps occurring within t, and the categorical\nsampling process can be first expressed using the Gumbel-Max method (Gumbel, 1954):\nz= arg max\ni(gi+ log πi), (2)\nwhere gi∈ {g0,g1,...,g n}is a random variable sampled independently from a standard\nGumbel distribution. The inclusion of giallows the inherently discrete sampling of jumps\n6\n--- Page 7 ---\nto be reformulated as a differentiable transformation, effectively shifting the randomness\nfrom the jump process to the parameter-free Gumbel distribution.\nTo obtain a differentiable approximation to the non-differentiable arg max function in\nEquation (2), we apply the softmax function:\nyi=softmax\ni(gi+ log πi) =exp(( gi+ log πi)/τ)Pn\nj=0exp(( gj+ log πj)/τ), (3)\nwhere yi, fori= 0,1,2...,n , denotes the relaxed probability (via Gumbel-Softmax method)\nof observing ijumps. τ >0 is a temperature parameter controlling the degree of approxi-\nmation. As τ→0, the Gumbel-Softmax samples approach one-hot, recovering the original\ncategorical samples.\n2.2. Neural Jump Stochastic Differential Equation (NJSDE) Model\nWe start from the stochastic volatility with correlated jumps (SVCJ) model in Duffie et al.\n(2000). The SVCJ model extends classical stochastic volatility models by incorporating\nsimultaneous jumps in both the asset price and its volatility process, thereby capturing\nmore realistic dynamics observed in financial markets. The specification of the SVCJ model\nis given below:\ndlogSt=µdt+p\nVtdW(S)\nt+Zy\ntdNt, (4)\ndVt=κ(θ−Vt)dt+σVp\nVtdW(V)\nt+Zv\ntdNt, (5)\nwhere StandVtrepresent the asset price and volatility process at time t, respectively. W(S)\nt\nandW(V)\ntare standard Brownian motions with a correlation coefficient ρ.Ntdenotes a\nPoisson process with constant intensity λ.Zy\ntandZv\ntare jump sizes in the asset price and\nvolatility process, respectively.\nWe retain stochastic terms in Equations (4) and (5), while the deterministic terms origi-\nnally defined by specific assumptions, including but not limited to µ,κandθ, are replaced\n7\n--- Page 8 ---\nby neural network components NN i, fori= 1,...,l , where ldepends on how many model\nparameters need to be approximated by neural networks. Each NN irepresents a feedfor-\nward neural network served as a nonparametric estimator of the corresponding determin-\nistic term. All networks share the same input features, including the asset price St, strike\nprice K, time to maturity t, and risk-free rate rf. These networks are independently param-\neterized with different weights to ensure flexible learning of distinct functional relationships.\nBy substituting predefined parameters with learnable neural networks, the proposed model\nalleviates the need for strong structural assumptions. Instead, model dynamics are inferred\ndirectly from data, enabling greater adaptability in capturing complex financial behavior.\nThe main NJSDE model expressions are given below:\ndSt=NN 1dt+NN 2dW(S)\nt+NN 3U(S)\ntf(NN 7), (6)\ndVt=NN 4dt+NN 5dW(V)\nt+NN 6U(V)\ntf(NN 7), (7)\nwhere NN 1,NN 2,NN 4, and NN 5replace the drift and diffusion terms in the asset price\nand volatility process directly. Jump sizes Zy\ntandZv\ntare assumed to follow continuous\ndistributions, we apply the reparameterization method to express them as the product of\ntwo components: a deterministic term parameterized by NN 3andNN 6, respectively, and\na stochastic term U(S)\ntandU(V)\nt, which are drawn from the uniform distribution on (0, 1),\nrespectively.\nWe approximate the jump term in Equations (4) and (5) using the Gumbel-Softmax\nmethod, which is f(NN 7) in Equations (6) and (7), and the jump intensity λis replaced\nby a neural network estimator NN 7. Applying Equation (1) within the time increment dt,\nthe probability of observing ijumps is:\nπi=(NN 7dt)i/i!Pn\nj=0(NN 7dt)j/j!. (8)\n8\n--- Page 9 ---\nThe correlation ρbetween Brownian motions W(S)\ntandW(V)\ntis also adaptively learned\nbyNN 8. Specifically, we define W(V)\ntas follow, where Wtis an independent Brownian\nmotion:\ndW(V)\nt=NN 8dW(S)\nt+p\n1−(NN 8)2dWt. (9)\n2.3. Model Calibration\nSince neural networks are embedded within the jump diffusion model, analytical solutions\nare not available. Therefore, we employ the Monte Carlo method to numerically approx-\nimate the option price. Taking European call option as an example, the option price can\nbe expressed as:\nP=1\nMMX\nk=1\b\ne−rfT(Sk\nT−K)+\t\n, (10)\nwhere Pis the estimated option price, Sk\nTis the asset price in the kthsimulation path at\nexpiration date Tfork= 1,2,...,M , and x+:=max{x,0}.\nThe calibration of the model is performed using Euler discretization. The discretized\ndynamics of the asset price Stand volatility Vtare generate at mdiscrete time points\nwithin T, where 0 ≤t≤Tand ∆ t=T/m:\nSt+∆t=St+NN 1∆t+NN 2√\n∆tε(S)\nt+NN 3U(S)\ntf(NN 7), (11)\nVt+∆t=Vt+NN 4∆t+NN 5√\n∆tε(V)\nt+NN 6U(V)\ntf(NN 7), (12)\nwhere ε(S)\ntandε(V)\ntare two random variables following a standard Normal distribution.\nThe model after discretization can be treated as a recursive expression, analogous to a\nspecialized form of recurrent neural networks, which allows for efficient training using BP\nalgorithm.\nA visualization of the model structure is presented in Figure 1. The input layer consists\nof four features: St,K,t,rf. These features are fed into eight independently parameterized\n9\n--- Page 10 ---\nFigure 1 Structure of Neural Jump Stochastic Differential Equation (NJSDE) Model\nNotes. Halskov (2023) has similar plots in spirit but under different settings.\nneural networks NN i, fori= 1,2,...,8, which together constitute the neural network layer.\nCombining neural networks with stochastic terms and ∆ tin the structural layer, we then\ngetSt+∆tin the output layer.\nLetωibe the vector of all trainable parameters of NN i, fori= 1,2,...,8, and define the\nfull parameter set as ω= (ω1,ω2,ω3,ω4,ω5,ω6,ω7,ω8). The loss function Lfor calibration\nis defined as:\nL=IX\nj=1[Pj−Pj(ω)]2, (13)\nwhere Irepresents the total number of options with different strikes and maturities. Pjis\nthe target price and Pj(ω) is the estimated price of the jthoption.\n10\n--- Page 11 ---\nThe calibration task is then formulated as the following optimization problem:\nmin\nωIX\nj=1[Pj−Pj(ω)]2. (14)\nTaking ω1, the trainable parameters of NN 1, as an example, we compute the gradient\nof loss function using the chain rule:\n∂L\n∂ω1=∂L\n∂Pj(ω)∂Pj(ω)\n∂ω1= 2IX\nj=1[Pj−Pj(ω)]∂Pj(ω)\n∂ω1. (15)\nApplying Equation (10), the gradient of the estimated price with respect to ω1can be\nexpressed as:\n∂Pj(ω)\n∂ω1=e−rfTj1\nMMX\nk=1[∂Sk\nTj\n∂ω1I{Sk\nTj−Kj>0}], (16)\nwhere TjandKj,j= 1,2,...,I , are the maturity and strike price of the jthoption, respec-\ntively, and I{·}is the indicator function. The recursive gradient of Sk\nt+∆twith respect to ω1\nis given as below, where 0 ≤t≤Tjand ∆ t=Tj/mfor the jthoption:\n∂Sk\nt+∆t\n∂ω1=∂NN 1\n∂ω1∆t+∂Sk\nt\n∂ω1[1 +∂NN 1\n∂Sk\nt∆t+∂NN 2\n∂Sk\nt√\n∆tϵ(S)\nt\n+∂NN 3\n∂Sk\ntU(S)\ntf(NN 7) +NN 3U(S)\nt∂f(NN 7)\n∂Sk\nt].(17)\nThese gradients can be efficiently computed using the BP algorithm, taking advantage\nof the differentiable structure of the neural network and the Monte Carlo simulation frame-\nwork. According to the chain rule, the gradients with respect to other parameters ωi, for\ni= 1,2,...,8, can be obtained in the same way. The main simulation steps are summarized\nin Algorithm 1.\n3. Numerical Experiments\nIn this section, we investigate the predictive performance of the proposed model using\nsimulated data. Specifically, we assume that the simulated data follows either the Heston\nmodel (Heston, 1993) or the SVCJ model (Duffie et al., 2000).\n11\n--- Page 12 ---\nAlgorithm 1 Simulation Procedure for the NJSDE Model\n1.Construct eight neural network structures NN i, fori= 1,2,...,8, with appropriate activation functions\nand numbers of layers.\n2.Set the time step size ∆ t=T/m in Equation (11), where Trepresents the expiration date and mindicates\nthe total number of time steps.\n3.Specify the number of training epochs Dand the number of Monte Carlo sample paths Mper epoch.\n4.Generate m×Mstandard random variables for ε(S)\nt,ε(V)\nt,U(S)\ntandU(V)\nt.\n5.Initialize S0andV0. Simulate Msample paths of StandVtusing Equations (11) and (12), and compute\noption prices via Equation (10).\n6.Minimize the loss function defined in Equation (13), and update the neural network parameter set ω\nusing BP algorithm. Repeat from Step 5 until the number of epochs reaches D.\nWe compare the performance of the NJSDE model with three parametric models: the\nBS model (Black and Scholes, 1973), the Heston model and the SVCJ model. Additionally,\nwe consider an ANN model, which is a classical nonparametric method widely adopted in\nthe literature, with over 150 papers applying it to option pricing and hedging (Ruf and\nWang, 2022), and the neural stochastic differentiable equation (NSDE) model (Wang and\nHong, 2021).\nModel accuracy is evaluated using two standard statistical indicators: mean absolute\nerror (MAE) and mean squared error (MSE), both of which quantify the deviation between\nactual and predicted option prices (Andreou et al., 2010; Shvimer and Zhu, 2024). These\nmetrics are defined as follows:\nMAE =1\nIIX\nj=1|Cj,actual−Cj,forecast |, (18)\nMSE =1\nIIX\nj=1(Cj,actual−Cj,forecast )2, (19)\nwhere Cj,actual is the actual option price and Cj,forecast is the forecast option price of the\njthoption, and Irepresents the total number of options.\n12\n--- Page 13 ---\n3.1. Heston model\nThe Heston model assumes that the asset price Stand volatility Vtfollow the dynamics:\ndSt=µStdt+p\nVtStdB1,t, (20)\ndVt=κ(θ−Vt)dt+σp\nVtdB2,t, (21)\nwhere B1,tandB2,tare two correlated standard Brownian motions with the correla-\ntion coefficient ρ. The parameters utilized to generate the numerical samples are spec-\nified as follows: µ= 0.04, κ= 1.5, θ= 0.1, σ= 0.3, ρ= -0.5. The initial values\nS0andV0are set at 100 and 0.04, respectively, and the risk-free rate rfis 0.025. In\nthe path simulation, the time to maturity Tand the strike price Kin the training\nset are determined by [1\n12,2\n12,3\n12,6\n12,1] and [60 ,70,80,90,100,110,120,130,140], respec-\ntively. For the testing set, TandKare determined by [1\n12,2\n12,3\n12,4\n12,5\n12,6\n12,8\n12,9\n12,10\n12,1]\nand [60 ,65,70,75,80,85,90,95,100,105,110,115,120,125,130,135,140], respectively. This\nsetup ensures broad coverage across different levels of moneyness and maturities, and each\nsample point corresponds to a unique ( T,K) pair under the specified parameter settings.\nThe parameter values and the sample point settings follow the experimental setup in Wang\nand Hong (2021).\nTable 1 Overall Pricing Performance of Synthetic Options Generated from the Heston Model\nBS Heston ANN NSDE NJSDE\nIn-sample MAE 0.4939 0.3817 0.9479 0.2280 0.2635\nMSE 1.1126 0.4891 2.3551 0.1123 0.1595\nOut-of-sample MAE 0.6077 0.4710 0.6430 0.2409 0.2519\nMSE 1.3746 0.6417 1.0507 0.1666 0.1387\nNotes. This table summarizes the in-sample and out-of-sample forecasting performance for synthetic options\ngenerated from the Heston model, using mean absolute error (MAE) and mean squared error (MSE).\n13\n--- Page 14 ---\nTable 1 presents the overall fitting results. In total, compared to traditional parametric\nand nonparametric models, both the NJSDE and the NSDE models demonstrate improved\npredictive performance. Specifically, the error between the NJSDE model and the NSDE\nmodel is minimal. The NSDE model achieves the lowest in-sample errors, with an MAE of\n0.2280 and an MSE of 0.1123. The NJSDE model reports slightly higher in-sample errors,\nwith an MAE of 0.2635 and an MSE of 0.1595, but the difference remains small, suggesting\nthat both models are highly effective in capturing the dynamics of the simulated data. In\nout-of-sample performance, the NSDE model continues to outperform slightly, attaining an\nMAE of 0.2409. However, the NJSDE model achieves the lowest MSE of 0.1387, indicating\na potential benefit in minimizing squared errors.\nThese results suggest that the NSDE model can be interpreted as a specific case of the\nNJSDE model. When the jump components are not significant, the coefficients of the jump\nprocess, estimated via neural networks, tend to converge to zero, effectively simplifying the\nNJSDE model into the NSDE formulation. The slight discrepancy in performance may be\nattributed to the increased complexity of the NJSDE model, which can introduce minor\nestimation errors.\nFurthermore, the ANN model exhibits significantly higher pricing errors compared to\nparametric models, likely due to its reliance on large datasets for effective training. Given\nthe limited size of the simulated dataset, its underperformance is expected. In contrast,\nthe NSDE and NJSDE models benefit from the structured parametric framework, which\nenhances model stability and enables accurate pricing even with moderate amounts of\ndata.\nTo comprehensively assess out-of-sample performance, we visualize the distribution of\naverage MAE across different days to maturity ( DTM ) and moneyness ( S/K) levels.\n14\n--- Page 15 ---\nFigure 2 Pricing Performances of the Competing Models across Different Moneyness and Maturities\n(a)Out-of-Sample: All Maturities\n (b)Out-of-Sample: Short-Term Maturity\n(c)Out-of-Sample: Medium-Term Maturity\n (d)Out-of-Sample: Long-Term Maturity\nNotes. This figure shows the model’s out-of-sample performances across different moneyness and days to maturity\nbrackets on the synthetic options generated from the Heston model, as measured by averages MAEs.\nFollowing Ludwig (2015), options are categorized into five moneyness intervals: deep out-\nthe-money (OTM) (0 .8< S/K < 0.9), OTM (0 .9≤S/K < 0.99), at-the-money (ATM)\n(0.99≤S/K < 1.01), in-the-money (ITM) (1 .01≤S/K < 1.1) and deep ITM (1 .1≤S/K <\n1.5).DTM are grouped into short-term (1 ≤DTM < 60 days), medium-term (60 ≤\nDTM < 180 days), and long-term ( DTM ≥180 days) maturity contracts.\n15\n--- Page 16 ---\nFigure 2a illustrates the out-of-sample pricing performance across whole maturities,\nwhile Figures 2b–2d focus on short, medium and long-term maturity, respectively. The\nx-axis denotes moneyness categories, and the y-axis represents the corresponding aver-\nage MAE values. In total, the NSDE and NJSDE models consistently outperform other\nbenchmark models. In particular, they exhibit stable performance across all the moneyness\nand maturity groups. As shown in Figure 2b, errors remain relatively low for short-term\nmaturities across models except for the ANN model. However, longer maturities (Figures\n2c and 2d) highlight the increasing advantage of the NSDE and NJSDE models.\nTable 2 DM Test of Different Models for Synthetic Options Generated from the Heston Model\nModel Heston ANN NSDE NJSDE\nBS 3.69 (p <0.01) 0.57 (p=0.56) 6.72 (p <0.01) 7.50 (p <0.01)\nHeston - 1.87 (p=0.06) 5.00 (p <0.01) 4.21 (p <0.01)\nANN - - 5.03 (p <0.01) 5.31 (p <0.01)\nNSDE - - - 0.65 (p=0.51)\nNotes. This table presents the DM values and p-values for pairwise comparisons. A positive DM statistic indicates a\npreference for the column model over the row model.\nThe Diebold and Mariano (2002) (DM) test is employed to statistically compare the\npredictive performance of each pair of competing models, with results summarized in Table\n2. Overall, the NJSDE model significantly outperforms the other benchmark models (p <\n0.01 in all relevant pairwise tests), except for the NSDE model. The DM statistic between\nthe NSDE and NJSDE models is 0.65 with a p-value of 0.51, suggesting no statistically\nsignificant difference in predictive performance. This result is consistent with the interpre-\ntation that the NJSDE model approximates the NSDE model in the absence of significant\njump components. Additionally, the ANN model does not exhibit statistically significant\nperformance differences when compared with the BS (p = 0.56) and Heston (p = 0.06)\nmodels, likely due to limited training data.\n16\n--- Page 17 ---\n3.2. SVCJ model\nThe SVCJ model assumes that the asset price Stand volatility Vtfollow the dynamics\nspecified in Equations (4) and (5). To examine the ability of the NJSDE model to capture\njump dynamics, we generate simulated option data incorporating jumps based on the\nSVCJ model. The parameter settings from the Heston model are retained and additional\njump-related parameters in the SVCJ model are introduced. Specifically, these parameters\nare set as follows: λ= 0.1,µv= 0.6,µy= 0.08,σy= 2.15,ρj= 0.57. The training and testing\ndata point settings keep identical to those in the previous experiment. The NJSDE model\nis compared against the same benchmark models as before, including the SVCJ model,\nwhich serves as the underlying parametric framework for the NJSDE model.\nTable 3 Overall Pricing Performance of Synthetic Options Generated from the SVCJ Model\nBS Heston SVCJ ANN NSDE NJSDE\nIn-sample MAE 1.1969 1.0194 0.6885 1.1346 0.8543 0.6127\nMSE 3.1573 2.4583 1.2674 2.5768 1.7692 0.7672\nOut-of-sample MAE 1.3619 1.2059 0.9020 1.0572 0.9565 0.7698\nMSE 3.0744 2.4027 1.5696 2.0038 1.7394 0.9955\nNotes. This table summarizes the in-sample and out-of-sample forecasting performance for synthetic options\ngenerated from the SVCJ model, using mean absolute error (MAE) and mean squared error (MSE).\nTable 3 presents the overall performance across different models. As shown, the NJSDE\nmodel achieves the lowest in-sample and out-of-sample errors, suggesting its superior abil-\nity to capture jump dynamics in option pricing. Among parametric models, the pricing\naccuracy improves with model complexity. The SVCJ model significantly outperforms the\nBS and Heston models, confirming the importance of jumps in both the asset price and\nvolatility processes. The ANN model, while achieving comparable performance to the Hes-\nton model, fails to surpass the SVCJ model. This result suggests that although neural\n17\n--- Page 18 ---\nnetworks can approximate non-linear dynamics, their effectiveness is constrained by data\navailability, particularly in capturing complex jump dynamics.\nFor hybrid models that integrate neural networks as parameter estimators, both the\nNSDE and NJSDE models exhibit superior performance compared to their respective para-\nmetric models, the Heston and SVCJ models, demonstrating the advantages of integrating\nthe data-driven method with structural modeling frameworks. Notably, compared to the\nSVCJ model, the NSDE model demonstrates slightly lower predictive accuracy. Although\nWang and Hong (2021) does not provide a direct comparison between these two models,\nour findings indicate that the effectiveness of the NSDE model may be limited in condi-\ntions with pronounced jump dynamics and sparse training data. This highlights the need\nto improve the NSDE model by integrating a jump process, particularly when training\ndata is limited.\nFigure 3 illustrates the error distribution across various maturity and moneyness levels.\nAs shown in Figure 3a, the NJSDE model consistently achieves the smallest or second\nsmallest errors across all maturity and moneyness groups. While the ANN model exhibits\nthe lowest errors in deep OTM, its performance deteriorates as the moneyness increases,\nparticularly in the deep ITM. The advantage of the NJSDE model is relatively small for\nthe short-term maturity shown in Figure 3b. However, it increases with longer maturities,\nas illustrated in Figures 3c and 3d.\nTable 4 presents the DM test results. The results show that the null hypothesis of\nequal predictive accuracy can be rejected at the 1% significance level in most comparisons\ninvolving the NJSDE model, suggesting that it significantly outperforms the benchmark\nmodels. Notably, the NJSDE model also significantly outperforms the SVCJ model, with\na DM statistic of 2.30 (p = 0.02), which supports rejection of the null hypothesis at\n18\n--- Page 19 ---\nFigure 3 Pricing Performances of the Competing Models across Different Moneyness and Maturities\n(a)Out-of-Sample: All Maturities\n (b)Out-of-Sample: Short-Term Maturity\n(c)Out-of-Sample: Medium-Term Maturity\n (d)Out-of-Sample: Long-Term Maturity\nNotes. This figure shows the model’s out-of-sample performances across different Moneyness and maturity brackets\non the synthetic options generated from SVCJ model, as measured by averages MAEs.\nthe 2% significance level. The DM value of the SVCJ model and the NSDE model is\n0.52 with a p-value of 0.60, which supports the findings presented previously in Table\n3, indicating that while the NSDE model underperforms the SVCJ model, the difference\nis not statistically significant. Lastly, there is no significant difference between the ANN\nmodel and the remaining models, except for the BS and NJSDE models.\n19\n--- Page 20 ---\nTable 4 DM Test of Different Models for Synthetic Options Generated from the SVCJ Model\nModel Heston SVCJ ANN NSDE NJSDE\nBS 3.94 (p <0.01) 3.80 (p <0.01) 2.56 (p=0.01) 5.52 (p <0.01) 6.24 (p <0.01)\nHeston - 2.65 (p <0.01) 1.10 (p=0.27) 3.26 (p <0.01) 5.62 (p <0.01)\nSVCJ - - 1.48 (p=0.13) 0.52 (p=0.60) 2.30 (p=0.02)\nANN - - - 0.72 (p=0.46) 4.32 (p <0.01)\nNSDE - - - - 2.95 (p <0.01)\nNotes. This table presents the DM values and p-values for pairwise comparisons. A positive DM statistic indicates a\npreference for the column model over the row model.\n4. Empirical Analysis\nWe further assess the model’s performance based on real market data. European-style S&P\n500 call options (SPX) data is obtained from OptionMetrics, covering the period from\nJanuary 2, 2018 to December 30, 2022. The in-sample period spans from January 2, 2018,\nto December 31, 2021, while the out-of-sample period extends from January 3, 2022, to\nDecember 30, 2022. Additionally, we adopt zero-coupon yield curve from OptionMetrics\nand apply linear interpolation to align with each option’s maturity (Chung et al., 2011).\nFollowing Ruf and Wang (2022), we apply several filters to eliminate illiquid options.\nSpecifically, we discard observations that meet any of the following criteria: zero trading\nvolume or open interest; bid price below 0.05 and ask price exceeding twice the bid price;\ntime to expiration of less than one calendar day; moneyness outside the range of 0.80\nto 1.50; violation of the lower boundary condition for European call option values. After\nremoving illiquid options, the final dataset consists of 591,284 SPX options across 1,258\ntrading days, with a daily average of approximately 470 options.\nTable 5 summarizes descriptive statistics of S&P 500 index options, categorized accord-\ning to days to maturity ( DTM ) and moneyness levels ( S/K). Panel A reports the number\nof option contracts, showing that short-term options dominate the dataset, with a total of\n20\n--- Page 21 ---\nTable 5 Overview of S&P 500 Option Data Summary\nMoneyness (0.8, 0.9) [0.9,0.99) [0.99, 1.01) [1.01, 1.1) [1.1, 1.5) Subtotal\nPanel A: Number of option contracts\nShort-term 19 ,516 113 ,590 33 ,748 60 ,667 18 ,284 245 ,805\nMedium-term 33 ,919 96 ,028 25 ,614 33 ,204 14 ,173 202 ,938\nLong-term 40 ,176 51 ,728 14 ,276 22 ,733 13 ,628 142 ,541\nSubtotal 93 ,611 261 ,346 73 ,638 116 ,604 46 ,085 591 ,284\nPanel B: Average option prices\nShort-term 3 .92 19 .88 67 .01 172 .77 590 .92 105 .29\nMedium-term 15 .21 63 .32 140 .90 252 .54 670 .82 138 .46\nLong-term 69 .04 179 .60 290 .88 395 .84 756 .39 249 .22\nSubtotal 35 .96 67 .45 136 .11 238 .98 664 .43 151 .37\nNotes. Moneyness is measured as S/K. We classify options into three maturity groups: short-term ( DTM < 60\ndays), medium-term (60 ≤DTM < 180 days), and long-term ( DTM ≥180 days).\n245,805 contracts. Additionally, the dataset contains a disproportionately large number of\nOTM options relative to ITM options. Average prices are shown in Panel B. Option prices\nexhibit a strong positive correlation with maturity, increasing from an average of 3.92 for\nshort-term deep OTM options to 756.39 for long-term deep ITM options. Moreover, for a\ngiven maturity, ITM options are priced significantly higher than OTM options.\nFigure 4 presents time series plots illustrating the trading dynamics of SPX options over\ntime. Figure 4a depicts the temporal variation in the number of option contracts catego-\nrized by DTM . Trading volume is substantially concentrated in short-term options, likely\ndriven by their superior liquidity and lower transaction costs. The spikes in trading volume\nare closely related to periods of market stress, as evidenced during COVID-19 in early\n2020. In particular, short-term options experienced the most significant increase. Figure 4b\ndisplays time series patterns in the option volume, classified by distinct moneyness groups.\nOTM options are the most actively traded and deep OTM options have shown an increase\n21\n--- Page 22 ---\nFigure 4 Monthly Dynamics of S&P 500 Index Options\n(a)Monthly Contract Counts across Maturity\n (b)Monthly Contract Counts across Moneyness\nNotes. Panels (a) and (b) depict the monthly number of observed option contracts sorted by maturity and moneyness,\nrespectively. Moneyness is measured by the spot-to-strike ratio ( S/K), and DTM refers to the number of calendar\ndays remaining until expiration.\nin trading volume over time. In contrast, deep ITM options are relatively less traded, with\ntrading volume remaining stable at approximately 1,000 contracts per day.\nTable 6 Overall S&P 500 Options Pricing Performance\nBS Heston SVCJ ANN NSDE NJSDE\nIn-sample MAE 5.7030 4.8872 4.5126 3.1673 3.9246 2.9324\nMSE 49.3829 64.5714 64.1508 36.0628 54.9145 32.8247\nOut-of-sample MAE 6.4308 4.4616 4.2944 4.0760 2.6794 2.4688\nMSE 59.8742 55.1507 46.3451 38.4611 15.6308 10.6443\nNotes. This table summarizes the S&P 500 options pricing errors, using mean absolute error (MAE) and mean\nsquared error (MSE).\nTable 6 summarizes the pricing performance in terms of MAE and MSE. We utilize the\nsame evaluation metrics and benchmark models as in the simulation experiments. The find-\nings demonstrate that the NJSDE model outperforms other baseline models in forecasting\nperformance. Compared with the simulation results, two main differences are observed in\nthe empirical findings. First, the NSDE model surpasses the SVCJ model in both in-sample\n22\n--- Page 23 ---\nand out-of-sample performance. This suggests that, given a sufficiently large dataset for\ntraining neural networks, a jump-free hybrid model can achieve lower pricing errors than a\njump diffusion structural model, likely due to the enhanced approximation capabilities of\nneural networks. Second, the ANN model achieves superior in-sample performance com-\npared to the NSDE model, though its performance remains slightly inferior to that of the\nNJSDE model. This can potentially be explained by the neural network’s strong approx-\nimation ability in large datasets and the absence of a jump process in the NSDE model.\nAlthough the ANN model performs well in-sample, it exhibits significantly higher out-of-\nsample errors than both the NJSDE and NSDE models, indicating possible overfitting. In\nconclusion, the results validate that jumps are present in S&P 500 options data and high-\nlight the importance of incorporating jumps into pricing models. The NJSDE model, in\nparticular, captures these jump-related features, demonstrating improved pricing accuracy.\nFigure 5 provides a detailed evaluation by categorizing options according to moneyness\nand days to maturity ( DTM ). Overall, Figure 5a indicates that the error distribution of\nthe NJSDE model remains relatively stable across different moneyness bins. It consistently\nexhibits the lowest or second-lowest pricing errors among all models. However, for options\nwith moneyness in the range [1.1, 1.5), the errors are noticeably larger, and this discrepancy\nbecomes more pronounced as maturity increases. Figure 5b shows that the NSDE and\nNJSDE models outperform traditional models for short-term options, particularly those\nnear the ATM, where they exhibit lower pricing errors. However, in Figures 5c and 5d, the\nNSDE and NJSDE models exhibit higher MAE for ITM and OTM options, particularly\nthose with long maturities and far from ATM. This may be due to the limited flexibility\nin deep ITM options, where parametric models tend to be less prone to misspecification.\nTable 7 presents the DM values for S&P 500 options. This evidence is consistent with\nprevious observations. Most importantly, the final column reports that the NJSDE model\n23\n--- Page 24 ---\nFigure 5 Pricing Performances of the Competing Models across Different Moneyness and Maturities\n(a)Out-of-Sample: All Maturities\n (b)Out-of-Sample: Short-Term Maturity\n(c)Out-of-Sample: Medium-Term Maturity\n (d)Out-of-Sample: Long-Term Maturity\nNotes. This figure shows the model’s out-of-sample performances across different Moneyness and maturity brackets\non the S&P 500 index options, as measured by averages MAEs.\nhas consistently and significantly lower forecast errors compared to other models, demon-\nstrating its robustness in S&P 500 option pricing. Compared to the SVCJ model, the NSDE\nmodel demonstrates statistically superior performance, with the difference being significant\nat the 1% level. Similarly, this discrepancy between the two models can be explained by the\nlarger dataset available in the real data experiment compared to the simulated data. These\nfindings suggest that data availability influences the performance of hybrid models and\n24\n--- Page 25 ---\nTable 7 DM Test of Different Models for S&P 500 Options\nModel Heston SVCJ ANN NSDE NJSDE\nBS 0.51 (p= 0 .60) 2.89 (p <0.01) 4.49 (p <0.01) 9.66 (p <0.01) 11.85 (p <0.01)\nHeston - 1.08 (p= 0 .27) 1.81 (p= 0 .07) 4.30 (p <0.01) 4.58 (p <0.01)\nSVCJ - - 1.17 (p=0.24) 5.62 (p <0.01) 6.98 (p <0.01)\nANN - - - 6.21 (p <0.01) 8.32 (p <0.01)\nNSDE - - - - 2.64 (p <0.01)\nNotes. This table presents the DM values and p-values for pairwise comparisons. A positive DM statistic indicates a\npreference for the column model over the row model.\nthat incorporating structural constraints can mitigate sensitivity to data volume. Addi-\ntionally, there is no statistically significant difference in forecasting performance between\nthe ANN model and the Heston or SVCJ models at conventional significance levels.\n5. Conclusion\nIn this paper, we establish a hybrid model for integrating jump theoretical structures with\nneural networks. As jump risk is a key determinant in option pricing, we construct a gra-\ndient learnable jump process that employs the Gumbel-Softmax method to accommodate\ndiscontinuities in the jump process and stochastic dependence on the trainable parameter.\nBy integrating these two influential models, neural networks and jump diffusion model, the\nproposed hybrid model achieves both economic interpretability and strong approximation\ncapabilities. Empirical results demonstrate that the proposed model provides superior pre-\ndictive accuracy compared to the benchmark models under jump conditions. In a jump-free\nsetting, it exhibits comparable performance to the NSDE model, demonstrating adaptabil-\nity in different market periods.\nReferences\nAmilon, H., 2003. A neural network versus Black–Scholes: A comparison of pricing and hedging performances.\nJournal of Forecasting 22, 317–335.\n25\n--- Page 26 ---\nAndreou, P.C., Charalambous, C., Martzoukos, S.H., 2008. Pricing and trading European options by com-\nbining artificial neural networks and parametric models with implied parameters. European Journal of\nOperational Research 185, 1415–1433.\nAndreou, P.C., Charalambous, C., Martzoukos, S.H., 2010. Generalized parameter functions for option\npricing. Journal of Banking & Finance 34, 633–646.\nBates, D.S., 1996. Jumps and stochastic volatility: Exchange rate processes implicit in deutsche mark options.\nThe Review of Financial Studies 9, 69–107.\nBates, D.S., 2003. Empirical option pricing: A retrospection. Journal of Econometrics 116, 387–404.\nBlack, F., Scholes, M., 1973. The pricing of options and corporate liabilities. Journal of Political Economy\n81, 637–654.\nCao, Y., Liu, X., Zhai, J., 2021. Option valuation under no-arbitrage constraints with neural networks.\nEuropean Journal of Operational Research 293, 361–374.\nChen, H., Didisheim, A., Scheidegger, S., 2025. Deep surrogates for finance: With an application to option\npricing. Journal of Financial Economics. Forthcoming.\nChen, R.T., Rubanova, Y., Bettencourt, J., Duvenaud, D.K., 2018. Neural ordinary differential equations.\nAdvances in Neural Information Processing Systems (NeurIPS) 31.\nChung, S.L., Tsai, W.C., Wang, Y.H., Weng, P.S., 2011. The information content of the S&P 500 index and\nVIX options on the dynamics of the S&P 500 index. Journal of Futures Markets 31, 1170–1201.\nCox, J.C., Ross, S.A., 1976. The valuation of options for alternative stochastic processes. Journal of Financial\nEconomics 3, 145–166.\nCummins, M., Esposito, F., 2025. Appraising model complexity in option pricing. Journal of Futures Markets\n45, 455–472.\nDas, S.P., Padhy, S., 2017. A new hybrid parametric and machine learning model with homogeneity hint for\nEuropean-style index option pricing. Neural Computing and Applications 28, 4061–4077.\nDiebold, F.X., Mariano, R.S., 2002. Comparing predictive accuracy. Journal of Business & Economic\nStatistics 20, 134–144.\n26\n--- Page 27 ---\nDuffie, D., Pan, J., Singleton, K., 2000. Transform analysis and asset pricing for affine jump-diffusions.\nEconometrica 68, 1343–1376.\nDupire, B., et al., 1994. Pricing with a smile. Risk 7, 18–20.\nE, W., 2017. A proposal on machine learning via dynamical systems. Communications in Mathematics and\nStatistics 1, 1–11.\nEraker, B., Johannes, M., Polson, N., 2003. The impact of jumps in volatility and returns. The Journal of\nFinance 58, 1269–1300.\nGumbel, E.J., 1954. Statistical theory of extreme values and some practical applications: A series of lectures.\nUS Government Printing Office.\nHalskov, K., 2023. A deep structural model for empirical asset pricing. Working Paper.\nHeston, S.L., 1993. A closed-form solution for options with stochastic volatility with applications to bond\nand currency options. The Review of Financial Studies 6, 327–343.\nHornik, K., Stinchcombe, M., White, H., 1989. Multilayer feedforward networks are universal approximators.\nNeural Networks 2, 359–366.\nHull, J., White, A., 1987. The pricing of options on assets with stochastic volatilities. The Journal of Finance\n42, 281–300.\nHutchinson, J.M., Lo, A.W., Poggio, T., 1994. A nonparametric approach to pricing and hedging derivative\nsecurities via learning networks. The Journal of Finance 49, 851–889.\nJang, E., Gu, S., Poole, B., 2017. Categorical reparameterization with Gumbel-Softmax. International\nConference on Learning Representations (ICLR) .\nJia, J., Benson, A.R., 2019. Neural jump stochastic differential equations. Advances in Neural Information\nProcessing Systems (NeurIPS) 32.\nKhoo, Y., Lu, J., Ying, L., 2021. Solving parametric PDE problems with artificial neural networks. European\nJournal of Applied Mathematics 32, 421–435.\nKidger, P., Morrill, J., Foster, J., Lyons, T., 2020. Neural controlled differential equations for irregular time\nseries. Advances in Neural Information Processing Systems (NeurIPS) 33, 6696–6707.\n27\n--- Page 28 ---\nKim, S., 2021. Portfolio of volatility smiles versus volatility surface: Implications for pricing and hedging\noptions. Journal of Futures Markets 41, 1154–1176.\nKou, S.G., 2002. A jump-diffusion model for option pricing. Management Science 48, 1086–1101.\nLi, X., Wong, T.K.L., Chen, R.T., Duvenaud, D., 2020. Scalable gradients for stochastic differential equations.\nInternational Conference on Artificial Intelligence and Statistics (AISTATS) , 3870–3882.\nLiu, S., Oosterlee, C.W., Bohte, S.M., 2019. Pricing options and computing implied volatilities using neural\nnetworks. Risk 7, 16.\nLudwig, M., 2015. Robust estimation of shape-constrained state price density surfaces. The Journal of\nDerivatives 22, 56–72.\nMa, J., Wu, X., Wu, H., 2023. A neural network rough volatility model. Working Paper.\nMa, Y., Dixit, V., Innes, M.J., Guo, X., Rackauckas, C., 2021. A comparison of automatic differentiation\nand continuous sensitivity analysis for derivatives of differential equation solutions. 2021 IEEE High\nPerformance Extreme Computing Conference (HPEC) , 1–9.\nMerton, R.C., 1976. Option pricing when underlying stock returns are discontinuous. Journal of Financial\nEconomics 3, 125–144.\nRuf, J., Wang, W., 2020. Neural networks for option pricing and hedging: A literature review. Journal of\nComputational Finance 24, 1–46.\nRuf, J., Wang, W., 2022. Hedging with linear regressions and neural networks. Journal of Business &\nEconomic Statistics 40, 1442–1454.\nShvimer, Y., Zhu, S.P., 2024. Pricing options with a new hybrid neural network model. Expert Systems with\nApplications 251, 123979.\nWang, S., Hong, L.J., 2021. Option pricing by neural stochastic differential equations: A simulation-\noptimization approach. 2021 Winter Simulation Conference (WSC) , 1–11.\n28",
  "text_length": 47568
}